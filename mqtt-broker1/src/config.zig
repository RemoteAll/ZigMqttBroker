const std = @import("std");

// ========================================================================
// 服务器配置
// ========================================================================
pub const PORT = 1883;
pub const KERNEL_BACKLOG = 128;

// ========================================================================
// 连接限制
// ========================================================================
pub const MAX_CONNECTIONS = 1_000_000; // 最大并发连接数（100万）
pub const IO_ENTRIES = 2048; // IO操作队列深度（必须是2的幂次方 且 ≤4095，因为io_uring entries参数是u12类型）
pub const QUEUE_DEPTH = 2048; // 传统队列深度(向后兼容)

// ========================================================================
// 内存池配置
// ========================================================================
// 初始预热大小：启动时立即分配的连接对象数
// 设置策略：根据预期的初期连接数设置，通常为峰值的 5-20%
// - 太小：频繁动态分配，连接建立延迟增加
// - 太大：初期内存占用多，闲置浪费
// 建议初值：1024（即使最终目标是 1M，也从小开始）
pub const INITIAL_POOL_SIZE = 1024;

// 最大连接数（连接池容量上限）
// 当活跃连接超过 INITIAL_POOL_SIZE 时，会逐步动态扩展
// 但总数不超过 MAX_CONNECTIONS
pub const MAX_POOL_SIZE = 100_000;

pub const MAX_MESSAGES_POOL = 10_000; // 消息池大小

// ========================================================================
// 缓冲区大小
// ========================================================================
pub const READ_BUFFER_SIZE = 4096; // 读取缓冲区(4KB)
pub const WRITE_BUFFER_SIZE = 4096; // 写入缓冲区(4KB)
pub const MAXIMUM_MESSAGE_SIZE = 256 * 1024; // 最大消息256KB

// ========================================================================
// 客户端标识
// ========================================================================
pub const MAX_CLIENT_ID_LEN = 64;
pub const MAX_MESSAGE_LEN = 2048; // 向后兼容

// ========================================================================
// 超时配置
// ========================================================================
pub const KEEP_ALIVE_DEFAULT = 60; // 默认保活时间(秒)
pub const CONNECTION_TIMEOUT = 30; // 连接超时(秒)

// ========================================================================
// 会话过期配置（MQTT 5.0 特性，MQTT 3.1.1 使用默认值）
// ========================================================================
// MQTT 3.1.1 Clean Session = 0 时的默认会话过期时间（秒）
// 注意：MQTT 3.1.1 协议本身不支持 session_expiry_interval
// 这是服务器端的默认配置，防止会话无限期保留
pub const DEFAULT_SESSION_EXPIRY_SEC = 3600; // 1小时
pub const MAX_SESSION_EXPIRY_SEC = 86400; // 24小时（最大值）
pub const SESSION_EXPIRY_NEVER = 0xFFFFFFFF; // 永不过期（MQTT 5.0）

// ========================================================================
// 主题限制
// ========================================================================
pub const MAX_TOPIC_LENGTH = 256;
pub const MAX_TOPIC_LEVELS = 16;

// ========================================================================
// 监控配置
// ========================================================================
pub const STATS_PUBLISH_INTERVAL_SEC = 5; // 统计信息发布间隔(秒)
pub const STATS_INTERVAL_NS = STATS_PUBLISH_INTERVAL_SEC * std.time.ns_per_s; // 纳秒单位

// ========================================================================
// 转发优化配置
// ========================================================================
// 批量转发触发阈值（订阅者数量 >= 此值时使用批量转发）
pub const BATCH_FORWARD_THRESHOLD = 10;

// 批量转发每批大小（平衡内存占用和系统调用次数）
// - 值越大：系统调用越少，但单次失败影响面越大
// - 值越小：容错性越好，但系统调用越多
// - 推荐值：100-1000（100万连接场景建议 5000-10000）
pub const FORWARD_BATCH_SIZE = 5000; // 100万设备优化

// ========================================================================
// 日志配置
// ========================================================================
pub const LogLevel = enum {
    debug, // 详细调试信息（性能影响大，仅开发环境使用）
    info, // 一般信息（默认，生产环境推荐）
    warn, // 警告信息
    err, // 仅错误信息（高性能场景）
};

// 默认日志级别
// - debug: 开发调试，输出所有细节（性能损失 30-50%）
// - info: 生产默认，输出关键操作（性能影响 < 5%）
// - warn: 仅警告和错误（性能影响 < 1%）
// - err: 仅错误信息（性能影响 < 0.1%）
pub const DEFAULT_LOG_LEVEL = LogLevel.info;
